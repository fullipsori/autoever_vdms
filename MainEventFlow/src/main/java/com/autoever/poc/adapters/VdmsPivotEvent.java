package com.autoever.poc.adapters;

import java.util.List;

import com.streambase.sb.*;
import com.streambase.sb.operator.*;

/**
 * Generated by JDT StreamBase Client Templates (Version: 11.0.1).
 *
 * This class is used as a Java Operator in a StreamBase application.
 * One instance will be created for each Java Operator in a StreamBase 
 * application. 
 * <p>
 * Enqueue methods should only be called from processTuple.
 * @see Parameterizable
 * @see Operator
 * For in-depth information on implementing a custom Java Operator, please see
 * "Developing StreamBase Java Operators" in the StreamBase documentation.
 */
public class VdmsPivotEvent extends Operator implements Parameterizable {

	public static final long serialVersionUID = 1730348564336L;
	private String displayName = "vdms pivot events";
	// Local variables
	private int inputPorts = 1;
	private int outputPorts = 1;
	private Schema[] outputSchemas; // caches the Schemas given during init() for use at processTuple()

	/**
	* The constructor is called when the Operator instance is created, but before the Operator 
	* is connected to the StreamBase application. We recommended that you set the initial input
	* port and output port count in the constructor by calling setPortHints(inPortCount, outPortCount).
	* The default is 1 input port, 1 output port. The constructor may also set default values for 
	* operator parameters. These values will be displayed in StreamBase Studio when a new instance
	* of this operator is  dragged to the canvas, and serve as the default values for omitted
	* optional parameters.
	 */
	public VdmsPivotEvent() {
		super();
		setPortHints(inputPorts, outputPorts);
		setDisplayName(displayName);
		setShortDisplayName(this.getClass().getSimpleName());

	}

	/**
	* The typecheck method is called after the Operator instance is connected in the StreamBase
	* application, allowing the Operator to validate its properties. The Operator class may 
	* change the number of input or output ports by calling the requireInputPortCount(portCount)
	* method or the setOutputSchema(schema, portNum) method. If the verifyInputPortCount method 
	* is passed a different number of ports than the Operator currently has, a PortMismatchException
	* (subtype of TypecheckException) is thrown.
	*/
	public void typecheck() throws TypecheckException {
		requireInputPortCount(inputPorts);

		// you must specify a setOutputSchema for each port, so that StreamBase Studio
		// knows how many output ports to draw for the output ports. If you do not
		// use setOutputSchema for each port, the Java Operator on the StreamBase Studio
		// canvas will not display the correct number of output ports.

		Schema inputSchema = getInputSchema(0);
		try {
			inputSchema.getField("signals");
			inputSchema.getField("signalSchema");
			setOutputSchema(0, inputSchema);
		} catch (TupleException e) {
			throw new TypecheckException(e);
		}

	}

	/**
	* This method will be called by the StreamBase server for each Tuple given
	* to the Operator to process. This is the only time an operator should 
	* enqueue output Tuples.
	* @param inputPort the input port that the tuple is from (ports are zero based)
	* @param tuple the tuple from the given input port
	* @throws StreamBaseException Terminates the application.
	*/
	@SuppressWarnings("unchecked")
	public void processTuple(int inputPort, Tuple tuple) throws StreamBaseException {
		// create a new output tuple from the Schema at the port we are about to send to
		Tuple out = outputSchemas[inputPort].createTuple();
		Schema signalSchema = outputSchemas[inputPort].getField("signalSchema").getSchema();

		try {
			for (int i = 0; i < out.getSchema().getFieldCount(); ++i) {
				// note: best performance is achieved retrieving values through Tuple#getField(Schema.Field)
				out.setField(i, tuple.getField(i));
			}
			List<Tuple> signals = (List<Tuple>)out.getList("signals");
			Tuple pvSignal = signalSchema.createTuple();
			signals.stream().forEach(t->{
				try {
					String eventName = t.getString("eventName");
					Double value = t.getDouble("value");

					CompleteDataType dataType = signalSchema.getField(eventName).getCompleteDataType();
					if(dataType == CompleteDataType.forDouble()) {
						pvSignal.setDouble(eventName, value);
					}else if(dataType == CompleteDataType.forInt()) {
						pvSignal.setInt(eventName, value.intValue());
					}else if(dataType == CompleteDataType.forLong()) {
						pvSignal.setLong(eventName, value.longValue());
					}else if(dataType == CompleteDataType.forString()) {
						pvSignal.setString(eventName, String.valueOf(value));
					}else if(dataType == CompleteDataType.forBoolean()) {
						pvSignal.setBoolean(eventName, value!=0);
					}

				}catch(Exception e) {
					e.printStackTrace();
				}
			});
			out.setField("signalSchema", pvSignal);
			sendOutput(0, out);

		} catch (Exception e) {
			e.printStackTrace();
			throw new StreamBaseException(e);
		}
	}

	/**
	 * If typecheck succeeds, the init method is called before the StreamBase application
	 * is started. Note that your Operator class is not required to define the init method,
	 * unless (for example) you need to perform initialization of a resource such as a JDBC
	 * pool, if your operator is making JDBC calls. StreamBase Studio does not call this
	 * during authoring.
	 */
	public void init() throws StreamBaseException {
		super.init();
		// for best performance, consider caching input or output Schema.Field objects for
		// use later in processTuple()
		outputSchemas = new Schema[outputPorts];

		for (int i = 0; i < outputPorts; ++i) {
			outputSchemas[i] = getRuntimeOutputSchema(i);
		}
	}

	/**
	*  The shutdown method is called when the StreamBase server is in the process of shutting down.
	*/
	public void shutdown() {

	}

}
