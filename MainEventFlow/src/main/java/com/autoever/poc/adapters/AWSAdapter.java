package com.autoever.poc.adapters;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Hex;

import com.autoever.poc.common.TimeUtils;



/**
* Generated by JDT StreamBase Client Templates (Version: 11.0.0).
*
* All custom java simple functions must live in a public Java class as a public static method.
* Custom Java simple functions can be accessed by the simple form of calljava in any expression
* except in aggregate functions.
* They may also be aliased for use as if that function were embedded
* in your StreamBase Application.
* <p>
* For in-depth information on implementing a StreamBase simple function, please see some
* related topics from "Developing StreamBase Custom Functions" in the StreamBase 
* documentation.
* <p>
*/
public class AWSAdapter {

	private static final String accessKey = "MTE3OTY1OA==";
    private static final String secretKey = "2dd45bb153db94699c7b6a7b495f940f";
    private static final String regionName = "us-east-1";
    private static final String serviceName = "execute-api";
    
    private static final String awsWas = "https://vdms.krcloud.s3.hmckmc.co.kr/rest/user/vdmsapp/done";


	/**
	* A StreamBase Simple Function. Use this function
	* in StreamBase expressions using the <em>calljava</em> function, or 
	* by an assigned alias. It can then be called directly 
	* using the alias name instead of using calljava().
	*/
	public static String GetAWSUrl(long baseTime, long vehicleID, String filename){
		LocalDateTime localDateTime = LocalDateTime.ofInstant(Instant.ofEpochSecond(baseTime), ZoneId.of("Asia/Seoul"));
		String dateTime = localDateTime.format(DateTimeFormatter.ofPattern("yyyy/MM/dd"));
		try {
			String urlEncodedFile = URLEncoder.encode(filename, StandardCharsets.UTF_8.toString());
			return String.format("%s/%s/%d/%s", awsWas, dateTime,vehicleID,urlEncodedFile);
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}

	/**
	* A StreamBase Simple Function. Use this function
	* in StreamBase expressions using the <em>calljava</em> function, or 
	* by an assigned alias. It can then be called directly 
	* using the alias name instead of using calljava().
	*/
	private static byte[] HmacSHA256(String data, byte[] key) throws Exception {
	    String algorithm="HmacSHA256";
	    Mac mac = Mac.getInstance(algorithm);
	    mac.init(new SecretKeySpec(key, algorithm));
	    return mac.doFinal(data.getBytes("UTF-8"));
	}
	/**
	* A StreamBase Simple Function. Use this function
	* in StreamBase expressions using the <em>calljava</em> function, or 
	* by an assigned alias. It can then be called directly 
	* using the alias name instead of using calljava().
	*/
	public static String GetSignature(String key, String dateStamp, String regionName, String serviceName) {
		// TODO Implement function here
		try {
			byte[] kSecret = ("AWS4" + key).getBytes("UTF-8");
			byte[] kDate = HmacSHA256(dateStamp, kSecret);
			byte[] kRegion = HmacSHA256(regionName, kDate);
			byte[] kService = HmacSHA256(serviceName, kRegion);
			byte[] kSigning = HmacSHA256("aws4_request", kService);
			return Hex.encodeHexString(kSigning);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}

	public static String GetAuthorization(){
	    // TODO Implement function here
		String dateStamp = TimeUtils.getUTCTime(Instant.now().getEpochSecond(), "yyyyMMdd");
		
		String signature = GetSignature(secretKey, dateStamp, regionName, serviceName);
		String authHeader = String.format("AWS4-HMAC-SHA256 Credential=%s/%s/%s/%s/aws4_request,SignedHeaders=host;x-amz-date, Signature=%s",
										accessKey, dateStamp, regionName, serviceName, signature);	
	    return authHeader;
	}

}
