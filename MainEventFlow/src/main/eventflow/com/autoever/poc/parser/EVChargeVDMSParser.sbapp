<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<modify version="11.0.1_9ac66cf38631f8473e37c39091c4b798f01bbf41">
    <add>
        <annotations>
            <annotation name="hygienic"/>
        </annotations>
        <type-metadata>
            <param name="type" value="module"/>
            <param name="fully-qualified-name" value="com.autoever.poc.parser.EVChargeVDMSParser"/>
        </type-metadata>
        <memory-model-settings/>
        <import alias="MainOutputDBCSchema" from="com.autoever.poc.maineventflow.AutoVDMSFlow_v2" item="MainOutputDBCSchema"/>
        <import alias="DBCDataSchema" from="com.autoever.poc.maineventflow.DBCSchema" item="DBCDataSchema"/>
        <import alias="DBCTableSchema" from="com.autoever.poc.maineventflow.DBCSchema" item="DBCTableSchema"/>
        <import alias="EVChargeSignalSchema" from="com.autoever.poc.maineventflow.canSignalSchemas" item="EVChargeSignalSchema"/>
        <import alias="TRIGDATA" from="com.autoever.poc.maineventflow.canSignalSchemas" item="TRIGDATA"/>
        <import alias="KafkaVDMSDataSchema" from="com.autoever.poc.maineventflow.kafkaSchemas" item="KafkaVDMSDataSchema"/>
        <named-schemas>
            <schema name="vehicleStatusSchema">
                <field name="vehicleKeyID" type="long"/>
                <field name="rootCount" type="int"/>
                <field name="signals" type="list">
                    <element-type type="tuple" value="TRIGDATA"/>
                </field>
            </schema>
        </named-schemas>
        <parameter-definitions>
            <parameter default="lv://localhost:11080" name="LV_SERVER_URI"/>
            <parameter default="D:/Projects/vdms/resources" name="RESOURCE_ROOT"/>
            <parameter default="D:/Dev/Python311/python.exe" name="PYTHON_EXECUTABLE"/>
        </parameter-definitions>
        <dynamic-variables>
            <dynamic-variable initial-expression="emptylist(string())" name="MATCH_SIGNALS" setter-expression="signalList" setter-stream="initialStream"/>
            <dynamic-variable initial-expression="emptylist(DBCDataSchema())" name="matchSignalMetas" setter-expression="matchDBCs" setter-stream="UpdateSignalVariable"/>
            <dynamic-variable initial-expression="emptylist(vehicleStatusSchema())" name="vehicleSignalStatus" setter-expression="UpdateVehicleSignalStatus(vehicleSignalStatus, input)" setter-stream="UpdateVehicleStatusStream"/>
        </dynamic-variables>
        <data name="DBCTable" shared="false" source="input" type="querytable">
            <param name="storage-method" value="heap"/>
            <param name="replicated" value="false"/>
            <param name="table-schema" value="DBCTableSchema"/>
            <param name="truncate" value="false"/>
            <preload format="csv" mode="empty"/>
        </data>
        <stream name="initialStream">
            <schema>
                <field name="signalList" type="list">
                    <element-type type="string"/>
                </field>
            </schema>
        </stream>
        <stream name="InputStream" schema="MainOutputDBCSchema"/>
        <box name="Split4" type="split">
            <input port="1" stream="InputStream"/>
            <output port="1" stream="out:Split4_1"/>
            <output port="2" stream="out:Split4_2"/>
            <output port="3" stream="out:Split4_3"/>
            <param name="output-count" value="3"/>
        </box>
        <box name="CheckDBCLoad" type="filter">
            <input port="1" stream="out:Split4_3"/>
            <output port="1" stream="out:CheckDBCLoad_1"/>
            <param name="autogen-nomatch-port" value="false"/>
            <param name="expression.0" value="!isempty(matchSignalMetas)"/>
        </box>
        <box name="ReadDBCData" type="query">
            <input port="1" stream="out:Split4_2"/>
            <output port="1" stream="out:ReadDBCData_1"/>
            <dataref id="querytable" name="DBCTable"/>
            <param name="operation" value="read"/>
            <param name="where" value="secondary-key"/>
            <param name="key-field.0" value="vehicleKeyID"/>
            <param name="key-lowerbound-value.0" value="kafkaMessage.VehicleKeyID"/>
            <param name="key-lowerbound-operation.0" value="eq"/>
            <param name="key-upperbound-operation.0" value="none"/>
            <param name="write-type" value="insert"/>
            <param name="if-write-fails" value="ignore"/>
            <param name="no-match-mode" value="output-no-match-null"/>
            <param name="order-by-direction" value="none"/>
            <target-list>
                <item name="input" selection="all"/>
                <item name="current" selection="none"/>
                <item name="old" selection="none"/>
                <item name="new" selection="none"/>
                <expressions>
                    <include field="matchDBCs">aggregatelist(current as DBCDataSchema)</include>
                </expressions>
            </target-list>
            <target-list goal-schema="DBCDataSchema" name="insert">
                <item name="input" selection="all"/>
            </target-list>
            <target-list goal-schema="DBCDataSchema" name="update">
                <item name="input" selection="all"/>
            </target-list>
            <target-list goal-schema="DBCDataSchema" name="no-match">
                <item name="input" selection="all"/>
            </target-list>
        </box>
        <box name="CheckDBC" type="filter">
            <input port="1" stream="out:ReadDBCData_1"/>
            <output port="1" stream="out:CheckDBC_1"/>
            <output port="2" stream="out:CheckDBC_2"/>
            <param name="autogen-nomatch-port" value="true"/>
            <param name="expression.0" value="!isnull(matchDBCs) &amp;&amp; !isempty(matchDBCs) &amp;&amp; !isnull(matchDBCs[0].vehicleKeyID)"/>
            <param name="expression.1" value="true"/>
        </box>
        <box name="Get_DBCIDs" type="map">
            <input port="1" stream="out:CheckDBCLoad_1"/>
            <output port="1" stream="out:Get_DBCIDs_1"/>
            <target-list>
                <item name="input" selection="all"/>
                <expressions>
                    <include field="dbcIDs">unique(maplist(function(d DBCDataSchema) {d.msg_id}, matchSignalMetas))</include>
                </expressions>
            </target-list>
        </box>
        <box name="GenCanDBCs" type="java">
            <input port="1" stream="out:Get_DBCIDs_1"/>
            <output port="1" stream="out:GenCanDBCs_1"/>
            <output port="2" stream="OutputRawDataStream"/>
            <param name="start:state" value="true"/>
            <param name="javaclass" value="com.autoever.poc.adapters.VdmsRawParser"/>
            <param name="parserType" value="CAN_DBC"/>
        </box>
        <box name="LoadDBC" type="map">
            <input port="1" stream="out:CheckDBC_1"/>
            <output port="1" stream="out:LoadDBC_1"/>
            <target-list>
                <item name="input" selection="none">
                    <include field="matchDBCs"/>
                </item>
            </target-list>
        </box>
        <box name="MapDBC" type="map">
            <input port="1" stream="out:CheckDBC_2"/>
            <output port="1" stream="out:MapDBC_1"/>
            <target-list>
                <item name="input" selection="none"/>
                <expressions>
                    <include field="vehicleKeyID">kafkaMessage.VehicleKeyID</include>
                    <include field="signals">MATCH_SIGNALS</include>
                    <include field="dirPaths">GetDirPathsInPath("${RESOURCE_ROOT}/dbc/EV/" + string(kafkaMessage.VehicleKeyID))</include>
                </expressions>
            </target-list>
        </box>
        <output-stream name="OutputRawDataStream"/>
        <module-reference name="LoadDBCList">
            <input name="InputStream" port="1" stream="out:MapDBC_1"/>
            <output name="ToCANDBCParser" port="1" stream="out:LoadDBCList_1"/>
            <param name="file" value="com.autoever.poc.parser.CANDBCLoadSignals"/>
            <input-dataref name="DBCTable" table="DBCTable"/>
            <parameter-bindings>
                <binding name="PYTHON_EXECUTABLE" value="${PYTHON_EXECUTABLE}"/>
                <binding name="RESOURCE_ROOT" value="${RESOURCE_ROOT}"/>
            </parameter-bindings>
        </module-reference>
        <box name="Organize" type="map">
            <input port="1" stream="out:GenCanDBCs_1"/>
            <output port="1" stream="out:Organize_1"/>
            <target-list>
                <item name="input" selection="all">
                    <remove field="PassThroughs"/>
                </item>
                <expressions>
                    <include field="*">PassThroughs.*</include>
                    <remove field="filePath"/>
                    <remove field="binaryData"/>
                </expressions>
            </target-list>
        </box>
        <box name="FilterMarker" type="filter">
            <input port="1" stream="out:Organize_1"/>
            <output port="1" stream="out:FilterMarker_1"/>
            <output port="2" stream="out:FilterMarker_2"/>
            <output port="3" stream="out:FilterMarker_3"/>
            <param name="autogen-nomatch-port" value="true"/>
            <param name="expression.0" value="IsStarted"/>
            <param name="expression.1" value="IsEnded"/>
            <param name="expression.2" value="true"/>
        </box>
        <box name="Union2" type="union">
            <input port="1" stream="out:LoadDBC_1"/>
            <input port="2" stream="out:LoadDBCList_1"/>
            <output port="1" stream="UpdateSignalVariable"/>
            <param name="strict" value="false"/>
        </box>
        <output-stream name="UpdateSignalVariable"/>
        <box name="MarkerEnded" type="map">
            <input port="1" stream="out:FilterMarker_2"/>
            <output port="1" stream="out:MarkerEnded_1"/>
            <target-list>
                <item name="input" selection="none">
                    <include field="perfData"/>
                    <include field="IsEnded"/>
                    <include field="IsStarted"/>
                    <include field="MSGIdx"/>
                    <include field="kafkaMessage"/>
                </item>
                <expressions>
                    <replace field="perfData.t3_time">to_milliseconds(now())</replace>
                </expressions>
            </target-list>
        </box>
        <box name="MarkerStarted" type="map">
            <input port="1" stream="out:FilterMarker_1"/>
            <output port="1" stream="out:MarkerStarted_1"/>
            <target-list>
                <item name="input" selection="none">
                    <include field="perfData"/>
                    <include field="IsEnded"/>
                    <include field="IsStarted"/>
                    <include field="MSGIdx"/>
                </item>
                <expressions>
                    <replace field="perfData.t2_time">to_milliseconds(now())</replace>
                </expressions>
            </target-list>
        </box>
        <box name="MatchSignal" type="map">
            <input port="1" stream="out:FilterMarker_3"/>
            <output port="1" stream="out:MatchSignal_1"/>
            <target-list>
                <item name="input" selection="all">
                    <declare field="maskedMsgID">if(bitand(RawHeader.MSGInfo, 0x1)==0x1) then bitand(RawHeader.DataID, 0x1FFFFFFF) else bitand(RawHeader.DataID, 0x7FF)</declare>
                </item>
                <expressions>
                    <include field="matched">filterlist(matchSignalMetas, function(dbc DBCDataSchema) { dbc.msg_id == maskedMsgID &amp;&amp; dbc.sig_channel == RawHeader.DataChannel})</include>
                </expressions>
            </target-list>
        </box>
        <box name="Filter" type="filter">
            <input port="1" stream="out:MatchSignal_1"/>
            <output port="1" stream="out:Filter_1"/>
            <param name="autogen-nomatch-port" value="false"/>
            <param name="expression.0" value="!isempty(matched)"/>
        </box>
        <box name="MarkerUnion" type="union">
            <input port="1" stream="out:MarkerStarted_1"/>
            <input port="2" stream="out:MarkerEnded_1"/>
            <output port="1" stream="out:MarkerUnion_1"/>
            <param name="strict" value="false"/>
        </box>
        <box name="AGGToHCP" type="aggregate">
            <input port="1" stream="out:MarkerUnion_1"/>
            <output port="1" stream="out:AGGToHCP_1"/>
            <param name="dimension-name.0" value="Dimension1"/>
            <param name="dimension-type.0" value="Predicate"/>
            <param name="dimension-partial.0" value="no"/>
            <param name="dimension-open-predicate.0" value="IsStarted"/>
            <param name="dimension-close-predicate.0" value="IsEnded &amp;&amp; firstval(perfData.kafka_msg_id) == perfData.kafka_msg_id"/>
            <param name="dimension-emit-close-first.0" value="false"/>
            <param name="output-group-by" value="true"/>
            <target-list>
                <expressions>
                    <include field="*">lastval(*)</include>
                    <replace field="perfData.t2_time">firstval(perfData.t2_time)</replace>
                    <replace field="perfData.t3_time">lastval(perfData.t3_time)</replace>
                </expressions>
            </target-list>
        </box>
        <box name="GetMatchedData" type="map">
            <input port="1" stream="out:Filter_1"/>
            <output port="1" stream="out:GetMatchedData_1"/>
            <target-list>
                <item name="input" selection="all">
                    <declare field="matchedDatas">GetMatchedSignal(RawHeader, matched)</declare>
                </item>
                <expressions>
                    <include field="matchedDatas">filterlist(matchedDatas, function(e TRIGDATA){ !(e.eventName=='VCMS_ChgInletTmpMax'&amp;&amp;e.value==215) })</include>
                </expressions>
            </target-list>
        </box>
        <box name="EndedCanProc" type="map">
            <input port="1" stream="out:AGGToHCP_1"/>
            <output port="1" stream="out:EndedCanProc_1"/>
            <target-list>
                <item name="input" selection="none"/>
                <expressions>
                    <include field="perfData">input1.perfData</include>
                    <replace field="perfData.kafka_msg_id">input1.perfData.kafka_msg_id + "_EV_CAN_DBC"</replace>
                    <replace field="perfData.data_count">MSGIdx-2</replace>
                </expressions>
            </target-list>
        </box>
        <box name="Filter3" type="filter">
            <input port="1" stream="out:GetMatchedData_1"/>
            <output port="1" stream="out:Filter3_1"/>
            <param name="autogen-nomatch-port" value="false"/>
            <param name="expression.0" value="!isempty(matchedDatas)"/>
        </box>
        <box name="addVehicleRef" type="map">
            <input port="1" stream="out:Filter3_1"/>
            <output port="1" stream="out:addVehicleRef_1"/>
            <target-list>
                <item name="input" selection="none">
                    <include field="messageID"/>
                    <include field="mgmtNO"/>
                    <include field="matchedDatas"/>
                </item>
                <expressions>
                    <include field="vehicleKeyID">kafkaMessage.VehicleKeyID</include>
                    <include field="rootCount">kafkaMessage.RootCount</include>
                    <include field="terminalID">kafkaMessage.TerminalID</include>
                    <include field="realTime">GetTimestamp(long((kafkaMessage.BaseTime + RawHeader.DeltaTime)*1000))</include>
                    <include field="refVehicleStatus">GetVehicleSignalStatus(vehicleSignalStatus, kafkaMessage.VehicleKeyID)</include>
                </expressions>
            </target-list>
        </box>
        <module-reference name="PublishPerf">
            <input name="InputStream" port="1" stream="out:EndedCanProc_1"/>
            <output name="OutputStream" port="1" stream="out:PublishPerf_1"/>
            <param name="parallel" value="true"/>
            <param name="parallel-region-queue-wait-strategy" value="BLOCKING"/>
            <param name="file" value="com.autoever.poc.maineventflow.PerfFlow"/>
            <parameter-bindings>
                <binding name="LV_SERVER_URI" value="${LV_SERVER_URI}"/>
            </parameter-bindings>
        </module-reference>
        <box name="Filter6" type="filter">
            <input port="1" stream="out:addVehicleRef_1"/>
            <output port="1" stream="out:Filter6_1"/>
            <output port="2" stream="out:Filter6_2"/>
            <param name="autogen-nomatch-port" value="false"/>
            <param name="expression.0" value="isnull(refVehicleStatus)||refVehicleStatus.rootCount!=rootCount"/>
            <param name="expression.1" value="!ContainSameTrigEvents(refVehicleStatus.signals, matchedDatas)"/>
        </box>
        <box name="GetChanged" type="map">
            <input port="1" stream="out:Filter6_2"/>
            <output port="1" stream="out:GetChanged_1"/>
            <target-list>
                <item name="input" selection="all"/>
                <expressions>
                    <include field="changedEvents">GetChangedTrigEvents(refVehicleStatus.signals, matchedDatas)</include>
                </expressions>
            </target-list>
        </box>
        <box name="Map2" type="map">
            <input port="1" stream="out:Filter6_1"/>
            <output port="1" stream="out:Map2_1"/>
            <target-list>
                <item name="input" selection="all"/>
                <expressions>
                    <include field="changedEvents">matchedDatas</include>
                </expressions>
            </target-list>
        </box>
        <box name="Union3" type="union">
            <input port="1" stream="out:Map2_1"/>
            <input port="2" stream="out:GetChanged_1"/>
            <output port="1" stream="out:Union3_1"/>
            <param name="strict" value="false"/>
        </box>
        <box name="MergeEvents" type="map">
            <input port="1" stream="out:Union3_1"/>
            <output port="1" stream="out:MergeEvents_1"/>
            <target-list>
                <item name="input" selection="all"/>
                <expressions>
                    <include field="signals">if(!isnull(refVehicleStatus) &amp;&amp; refVehicleStatus.rootCount==rootCount) then MergeTrigEvents(refVehicleStatus.signals, matchedDatas) else matchedDatas</include>
                </expressions>
            </target-list>
        </box>
        <box name="Split6" type="split">
            <input port="1" stream="out:MergeEvents_1"/>
            <output port="1" stream="out:Split6_1"/>
            <output port="2" stream="out:Split6_2"/>
            <param name="output-count" value="2"/>
        </box>
        <box name="addPVSchema" type="map">
            <input port="1" stream="out:Split6_2"/>
            <output port="1" stream="out:addPVSchema_1"/>
            <target-list>
                <item name="input" selection="all"/>
                <expressions>
                    <include field="signalSchema">EVChargeSignalSchema()</include>
                </expressions>
            </target-list>
        </box>
        <box name="MapForVar" type="map">
            <input port="1" stream="out:Split6_1"/>
            <output port="1" stream="UpdateVehicleStatusStream"/>
            <target-list>
                <item name="input" selection="none">
                    <include field="vehicleKeyID"/>
                    <include field="rootCount"/>
                    <include field="signals"/>
                </item>
            </target-list>
        </box>
        <output-stream name="UpdateVehicleStatusStream"/>
        <box name="PivotSignal" type="java">
            <input port="1" stream="out:addPVSchema_1"/>
            <output port="1" stream="out:PivotSignal_1"/>
            <param name="start:state" value="true"/>
            <param name="javaclass" value="com.autoever.poc.adapters.VdmsPivotEvent"/>
        </box>
        <box name="Iterate2" type="iterate">
            <input port="1" stream="out:PivotSignal_1"/>
            <output port="1" stream="out:Iterate2_1"/>
            <param name="iterate-expr" value="matchedDatas"/>
            <target-list>
                <item name="input" selection="all"/>
                <expressions>
                    <include field="eventName">each.element.eventName</include>
                    <include field="value">each.element.value</include>
                </expressions>
            </target-list>
        </box>
        <box name="AddSequence" type="seqnum">
            <input port="1" stream="out:Iterate2_1"/>
            <output port="1" stream="out:AddSequence_1"/>
            <param name="output-field" value="sequence3_id"/>
            <param name="sequence-id" value="sequence3id"/>
            <param name="update-expression" value="if(sequence3id&lt;100000000) then sequence3id + 1 else 0"/>
        </box>
        <box name="addTableDatas" type="map">
            <input port="1" stream="out:AddSequence_1"/>
            <output port="1" stream="out:addTableDatas_1"/>
            <target-list>
                <item name="input" selection="all">
                    <remove field="matchedDatas"/>
                    <remove field="refVehicleStatus"/>
                    <remove field="signals"/>
                    <remove field="signalSchema"/>
                    <remove field="sequence3_id"/>
                    <remove field="changedEvents"/>
                </item>
                <expressions>
                    <replace field="messageID">messageID + '_' + sequence3_id</replace>
                    <include field="*">signalSchema.*</include>
                </expressions>
            </target-list>
        </box>
        <box name="addACOut" type="map">
            <input port="1" stream="out:addTableDatas_1"/>
            <output port="1" stream="out:addACOut_1"/>
            <target-list>
                <item name="input" selection="all"/>
                <expressions>
                    <replace field="OBC_AC_OUT_KW">if(!isnull(OBC_AcL1CurrVal) &amp;&amp; !isnull(OBC_AcVoltVal)) then OBC_AcL1CurrVal*OBC_AcVoltVal/1000 else null</replace>
                </expressions>
            </target-list>
        </box>
        <box name="EvChargePVTablePublishRaw" type="outputadapter">
            <input port="1" stream="out:addACOut_1"/>
            <output port="1" stream="out:EvChargePVTablePublishRaw_1"/>
            <param name="start:state" value="true"/>
            <param name="javaclass" value="com.streambase.sb.adapter.liveview.LiveViewPublish"/>
            <param name="ackPeriod" value="0"/>
            <param name="adHoc" value="false"/>
            <param name="bufferSize" value="1024"/>
            <param name="connectInline" value="false"/>
            <param name="connectionKey" value=""/>
            <param name="deleteField" value=""/>
            <param name="dynamicTableName" value="false"/>
            <param name="enableCompressedConnection" value="false"/>
            <param name="encapsulatingLV" value="false"/>
            <param name="flushInterval" value="250"/>
            <param name="logLevel" value="INFO"/>
            <param name="lvTableName" value="EVChargePVTable"/>
            <param name="pubName" value=""/>
            <param name="reliablePub" value="false"/>
            <param name="seqField" value=""/>
            <param name="shareConnection" value="true"/>
            <param name="strictSchema" value="false"/>
            <param name="throughPort" value="false"/>
            <param name="uri" value="${LV_SERVER_URI}"/>
            <param name="useRuntimeURI" value="false"/>
        </box>
        <box name="Union" type="union">
            <input port="1" stream="out:PublishPerf_1"/>
            <input port="2" stream="out:EvChargePVTablePublishRaw_1"/>
            <output port="1" stream="OutputParserStream"/>
            <param name="strict" value="false"/>
        </box>
        <output-stream name="OutputParserStream"/>
    </add>
</modify>
