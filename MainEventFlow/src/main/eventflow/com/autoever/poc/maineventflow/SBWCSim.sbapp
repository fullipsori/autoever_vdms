<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<modify version="11.0.1_9ac66cf38631f8473e37c39091c4b798f01bbf41">
    <add>
        <annotations>
            <annotation name="hygienic"/>
        </annotations>
        <type-metadata>
            <param name="type" value="module"/>
            <param name="fully-qualified-name" value="com.autoever.poc.maineventflow.SBWCSim"/>
        </type-metadata>
        <memory-model-settings/>
        <import alias="MainOutputDBCSchema" from="com.autoever.poc.maineventflow.AutoVDMSFlow_v2" item="MainOutputDBCSchema"/>
        <import alias="DBCDataSchema" from="com.autoever.poc.maineventflow.DBCSchema" item="DBCDataSchema"/>
        <import alias="DBCTableSchema" from="com.autoever.poc.maineventflow.DBCSchema" item="DBCTableSchema"/>
        <import alias="SBWCSignalSchema" from="com.autoever.poc.maineventflow.canSignalSchemas" item="SBWCSignalSchema"/>
        <import alias="TRIGDATA" from="com.autoever.poc.maineventflow.canSignalSchemas" item="TRIGDATA"/>
        <import alias="KafkaVDMSDataSchema" from="com.autoever.poc.maineventflow.kafkaSchemas" item="KafkaVDMSDataSchema"/>
        <named-schemas>
            <schema name="vehicleStatusSchema">
                <field name="vehicleKeyID" type="long"/>
                <field name="rootCount" type="int"/>
                <field name="signals" type="list">
                    <element-type type="tuple" value="TRIGDATA"/>
                </field>
            </schema>
        </named-schemas>
        <parameter-definitions>
            <parameter default="lv://localhost:11080" name="LV_SERVER_URI"/>
            <parameter default="D:/Projects/vdms/resources" name="RESOURCE_ROOT"/>
            <parameter default="D:/Dev/Python311/python.exe" name="PYTHON_EXECUTABLE"/>
        </parameter-definitions>
        <dynamic-variables>
            <dynamic-variable initial-expression="emptylist(string())" name="MATCH_SIGNALS" setter-expression="signalList" setter-stream="InitialStream"/>
            <dynamic-variable initial-expression="emptylist(tuple(string(), emptylist(string())))" name="SIGNAL_CATEGORY" setter-expression="signalCategory" setter-stream="InitialStream"/>
            <dynamic-variable initial-expression="emptylist(vehicleStatusSchema())" name="vehicleSignalStatus" setter-expression="UpdateVehicleSignalStatus(vehicleSignalStatus, input)" setter-stream="UpdateVehicleStatusStream"/>
        </dynamic-variables>
        <stream name="controlFeed">
            <schema>
                <field name="command" type="string"/>
                <field name="value" type="double"/>
            </schema>
        </stream>
        <stream name="InitialStream">
            <schema>
                <field name="signalList" type="list">
                    <element-type type="string"/>
                </field>
                <field name="signalCategory" type="list">
                    <element-type type="tuple">
                        <schema>
                            <field name="expr_0" type="string"/>
                            <field name="expr_1" type="list">
                                <element-type type="string"/>
                            </field>
                        </schema>
                    </element-type>
                </field>
            </schema>
        </stream>
        <box name="InputAdapter" type="inputadapter">
            <input port="1" stream="controlFeed"/>
            <output port="1" stream="out:InputAdapter_1"/>
            <output port="2" stream="out:InputAdapter_2"/>
            <param name="start:state" value="true"/>
            <param name="javaclass" value="com.streambase.sb.adapter.sbfeedsim.SBFeedsim"/>
            <param name="enableControlPort" value="true"/>
            <param name="filenameFieldName" value=""/>
            <param name="logLevel" value="INFO"/>
            <param name="reportRateS" value="0"/>
            <param name="sbfsFileName" value="SBWCDataTable.sbfs"/>
            <param name="waitForStartCommand" value="true"/>
        </box>
        <box name="Split" type="split">
            <input port="1" stream="out:InputAdapter_2"/>
            <output port="1" stream="out:Split_1"/>
            <output port="2" stream="out:Split_2"/>
            <param name="output-count" value="2"/>
        </box>
        <box name="Map2" type="map">
            <input port="1" stream="out:Split_1"/>
            <output port="1" stream="out:Map2_1"/>
            <target-list>
                <item name="input" selection="none">
                    <declare field="matchedDatas">[TRIGDATA(0, 0, 0, eventName, "", "", value)]</declare>
                    <declare field="refVehicleStatus">GetVehicleSignalStatus(vehicleSignalStatus, vehicleKeyID)</declare>
                    <include field="vehicleKeyID"/>
                    <include field="rootCount"/>
                </item>
                <expressions>
                    <include field="signals">if(!isnull(refVehicleStatus) &amp;&amp; refVehicleStatus.rootCount==rootCount) then MergeTrigEvents(refVehicleStatus.signals, matchedDatas) else matchedDatas</include>
                </expressions>
            </target-list>
        </box>
        <box name="Map3" type="map">
            <input port="1" stream="out:Split_2"/>
            <output port="1" stream="out:Map3_1"/>
            <target-list>
                <item name="input" selection="all"/>
                <expressions>
                    <replace field="realTime">now()</replace>
                </expressions>
            </target-list>
        </box>
        <box name="Union5" type="union">
            <input port="1" stream="out:Map2_1"/>
            <output port="1" stream="UpdateVehicleStatusStream"/>
            <param name="strict" value="false"/>
        </box>
        <box name="Union6" type="union">
            <input port="1" stream="out:Map3_1"/>
            <output port="1" stream="out:Union6_1"/>
            <param name="strict" value="false"/>
        </box>
        <output-stream name="UpdateVehicleStatusStream"/>
        <box name="Map" type="map">
            <input port="1" stream="out:Union6_1"/>
            <output port="1" stream="out:Map_1"/>
            <target-list>
                <item name="input" selection="all"/>
                <expressions>
                    <include field="signals">GetVehicleSignalStatus(vehicleSignalStatus, vehicleKeyID).signals</include>
                    <include field="signalSchema">SBWCSignalSchema()</include>
                </expressions>
            </target-list>
        </box>
        <box name="ToPVSignal" type="java">
            <input port="1" stream="out:Map_1"/>
            <output port="1" stream="out:ToPVSignal_1"/>
            <param name="start:state" value="true"/>
            <param name="javaclass" value="com.autoever.poc.adapters.VdmsPivotEvent"/>
        </box>
        <box name="addSequence2" type="seqnum">
            <input port="1" stream="out:ToPVSignal_1"/>
            <output port="1" stream="out:addSequence2_1"/>
            <param name="output-field" value="sequence2_id"/>
            <param name="sequence-id" value="sequence2id"/>
            <param name="update-expression" value="if(sequence2id&lt;100000000) then sequence2id + 1 else 0"/>
        </box>
        <box name="addTableDatas" type="map">
            <input port="1" stream="out:addSequence2_1"/>
            <output port="1" stream="out:addTableDatas_1"/>
            <target-list>
                <item name="input" selection="all">
                    <remove field="sequence2_id"/>
                    <remove field="signals"/>
                    <remove field="signalSchema"/>
                </item>
                <expressions>
                    <replace field="messageID">messageID + '_' + sequence2_id</replace>
                    <include field="category">filterlist(SIGNAL_CATEGORY, function (t (expr_0 string, expr_1 list(string))) { eventName in t.expr_1 })[0].expr_0</include>
                    <include field="*">signalSchema.*</include>
                </expressions>
            </target-list>
        </box>
        <box name="ToSBWCDataTable" type="outputadapter">
            <input port="1" stream="out:addTableDatas_1"/>
            <output port="1" stream="OutputParserStream"/>
            <param name="start:state" value="true"/>
            <param name="javaclass" value="com.streambase.sb.adapter.liveview.LiveViewPublish"/>
            <param name="ackPeriod" value="0"/>
            <param name="adHoc" value="false"/>
            <param name="bufferSize" value="1024"/>
            <param name="connectInline" value="false"/>
            <param name="connectionKey" value=""/>
            <param name="deleteField" value=""/>
            <param name="dynamicTableName" value="false"/>
            <param name="enableCompressedConnection" value="false"/>
            <param name="encapsulatingLV" value="false"/>
            <param name="flushInterval" value="250"/>
            <param name="logLevel" value="INFO"/>
            <param name="lvTableName" value="SBWCPVTable"/>
            <param name="pubName" value=""/>
            <param name="reliablePub" value="false"/>
            <param name="seqField" value=""/>
            <param name="shareConnection" value="true"/>
            <param name="strictSchema" value="false"/>
            <param name="throughPort" value="false"/>
            <param name="uri" value="${LV_SERVER_URI}"/>
            <param name="useRuntimeURI" value="false"/>
        </box>
        <output-stream name="OutputParserStream"/>
    </add>
</modify>
